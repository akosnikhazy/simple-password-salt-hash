class password
{
	public function generateSalt($key = '')
	{/**
	  * Generate a salt. In a good system every salt is unique. When user creates new password it is good to generate new salt
	  * Using a random number and the time() there is almost no chance you get the same salt for two passwords and it is hard 
	  * to predict. Version 1.1 uses mt_rand and sha256 for this.
	  * param: $key: if you want a system level + value for harder guess work. More secure. Overdone.
	  * 
	  * return: string(64) SALT
	  */
		return hash('sha256',mt_rand() . $key . time());
	}
	
	public function hashPassword($pass,$salt = false)
	{/**
	  * Return password and salt. In a good system every salt is unique. When user creates new password it is good to generate new salt
	  * 
	  * param: $pass: The password that the user provided
	  * param: $salt: The salt we generated before with generateSalt() or any other way as you please. If false it generated here (for
          * at new user a new salt can be generated by setting it false).
	  * 
	  * return: array(2) { ["saltedPasswordHash"]=> string(64) SALTED PASSWORD HASH ["salt"]=> string(64) SALT }
	  */
		if(!$salt)
			$salt = $this->generateSalt();
			
		return array('saltedPasswordHash' => $this->saltPassword($pass,$salt),'salt'=>$salt);
	}
	
	private function saltPassword($pass,$salt)
	{/**
	  * Generate a salted password. In a good system every salt is unique. When user creates new password it is good to generate new salt
	  * 
	  * param: $pass: The password that the user provided
	  * param: $salt: The salt	  
	  * return: string(64) SALTED PASSWORD HASH
	  */
	  
		// this could be any mumbojumbo. Change as you please, but always put in $salt and $pass in some combination
		// WARNING: if you have an already working system with registered user never change this. Any change in this
		// after the first usages makes the passwords unusable as you have to salt the typed in passwords too so you 
		// can compare them to the stored hashed passwords.
		//
		// examples:
		// return sha1($pass.md5($salt));
		// return sha1(md5($salt).$pass.$salt.'lol i am so random');
		// return sha1(strlen($pass).$salt);
		return hash('sha256',$pass.hash('sha256',$salt).$pass);
	}
	
}
